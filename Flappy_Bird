#include <iostream>
#include <conio.h>      // getch()
#include <windows.h>    // SetConsoleCursorPosition()
#include<fstream>

using namespace std;

fstream input_highscore;
ofstream output_highscore;
const int space = 5;
const int a = 5;
int set[3][2] = { { 25, 0 }, { 50, 0 }, { 75, 0 } };
int hurd[3] = { 8, 5, 10 };
int b = 7;
int score = 0;
int highScore = 0;
int clear[3][2] = { { 26, 0 }, { 51, 0 }, { 76, 0 } };


void menu();
void goToXY(int x, int y);
void clearscreen(int x, int y);
bool check_collision();
void print();
void clearold();
void FlappyBird(bool key);
void help();
void credits();
void endgame();


int main()
{
	system("Color F6");

	input_highscore.open("highscore.txt");
	if (input_highscore.is_open())
	{
		input_highscore >> highScore;
		input_highscore.close();
	}
	else highScore = 0;


	int a = 0;
	int b = 0;
	char sl; //selection variable
	while (1) //loop for repeating actions after each start
	{
		if (a == 0)
			goto play;
		if (a>0)               //if you play not the first time, it will ask you if you want to play
		{
			score = 0;
			cout << "Do you want to play again? [y/n] ";
			cin >> sl;
			if (sl == 'n')
				goto quit;
			else goto play;
		}
	play:
		menu(); //calling menu function
		cin >> sl;
		switch (sl) //menu selections
		{
		case '1':
		{
					system("cls");
					int x = 0, y = 19;
					for (x = 0; x<79; x++)
					{
						goToXY(x, y);
						cout << "--";
					}
					while (true)
					{
						clearold();
						print();

						if (_kbhit() == true && _getch() == 32)
							FlappyBird(true);
						else
							FlappyBird(false);
						if (check_collision())
						{
							goToXY(a, b);
							cout << "O";
							break;
						}
						goToXY(65, 20);
						cout << "SCORE :" << score;
						/*	if (score > highScore)
						highScore = score;*/

						//Sleep(100);
					}
					goToXY(0, 23);
					break;
		}
		case '2': //other selections-other functions
		{
					  help();
					  goto play;
					  break;
		}
		case '3':
		{
					credits();
					goto play;
					break;
		}
		case '4':
		{
					goto quit; //exits game
					break;
		}
		default:
		{
				   goto play;
				   break;
		}
		}
		//variable for checking how many times you've played
	}
quit:
	{
		cout << "I quit."; //stops game, app closes.
		endgame();
		Sleep(300);
	}


	system("pause");
	return 0;
}

void menu()  //shows menu
{
	system("cls");
	cout << "" << endl;
	cout << "         --------------------------------------------------------  " << endl;
	cout << "        |                                                        | " << endl;
	cout << "        |   **** *    **** **** **** *   *    ***  * ***  ***    | " << endl;
	cout << "        |   *    *    *  * *  * *  * *   *    *  * * *  * *  *   | " << endl;
	cout << "        |   ***  *    **** **** **** *****    ***  * ***  *  *   | " << endl;
	cout << "        |   *    *    *  * *    *      *      *  * * *  * *  *   | " << endl;
	cout << "        |   *    **** *  * *    *      *      ***  * *  * ***    | " << endl;
	cout << "        |                                                        | " << endl;
	cout << "         --------------------------------------------------------  " << endl;
	cout << "" << endl << endl;
	cout << "                  High Score:  " << highScore << endl << endl;
	cout << "" << endl << endl;
	cout << "                     M E N U:    " << endl << endl;
	cout << "                  1: Start Game  " << endl << endl;
	cout << "                  2: Help        " << endl << endl;
	cout << "                  3: Credits     " << endl << endl;
	cout << "                  4: Exit        " << endl << endl;
}



void goToXY(int x, int y)
{
	COORD coord = { x, y };
	SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), coord);
}
void FlappyBird(bool key)
{

	if (key == true)
		b -= 2;

	goToXY(a, b);
	cout << "O";
	Sleep(100);
	goToXY(a, b);
	cout << " ";
	b++;
}
void clearscreen(int x, int y)
{

	HANDLE hOutput = GetStdHandle(STD_OUTPUT_HANDLE);
	COORD coord = { x, y };
	SetConsoleCursorPosition(hOutput, coord);

	char buff[] = "   ";
	WriteConsoleA(hOutput, buff, 3, NULL, NULL);
}
bool check_collision()
{
	if (b == 0 || b == 19)
	{
		return true;
	}
	for (int i = 0; i<3; i++)
	{
		if ((set[i][0] >= a&&set[i][0] <= a + 1) && ((b>0 && b <= hurd[i]) || (set[i][0] >= a&&set[i][0] <= a + 1) && ((b>hurd[i] + space) && b<19)))
		{
			return true;
		}
	}
	return false;
}
void print()
{

	int y = 0;
	for (int i = 0; i < 3; i++)
	{
		for (y = 0; y < 19; y++)
		{
			if (y == hurd[i])
				y = y + space;
			goToXY(set[i][0], y);
			cout << "X";
		}
		y = 0;
		if (set[i][0] <= 0)
		{
			score++;
			hurd[i] = rand() % 11 + 1;
			set[i][0] = 75;
		}
		set[i][0]--;
	}
gameEnd:   //ends game
	{
		if (score > highScore) highScore = score;
		//if hi-score file exists, it writes your new highscore there.
		{
			output_highscore.open("highscore.txt");
			output_highscore << highScore;
			output_highscore.close();
		}
		//shows ending screen, and returns to int 
		return;
	}
}

void clearold()
{

	int y = 0;
	for (int i = 0; i<3; i++)
	{
		for (y = 0; y<19; y++)
		{
			goToXY(clear[i][0], y);
			cout << " ";
		}
		y = 0;
		if (clear[i][0] <= 0)
		{
			clear[i][0] = 75;
		}
		clear[i][0]--;
	}
}

void help()
{
	system("cls");
	char selection;

	cout << endl << endl;
	cout << "                  Contols: Press SPACEBAR to fly up.                      " << endl << endl;
	cout << "             Goal: Fly through the holes between the pipes.               "<< endl;
	cout << "            When you pass through the hole, you get one point.            " << endl;
	cout << "             Try to pass through as many holes, as you can.               " << endl;
	cout << "            But be careful, don't hit the pipes or the ground!            "<< endl << endl;
	cout << "                          Are you ready? Go!                              " << endl << endl << endl;
	cout << "Go back? [y/n]  ";
	cin >> selection;

	if (selection = 'y')
		return;
	else system("cls");

}


void credits()
{
	system("cls");
	char sel;
	cout << "                Computer Programming Project      " << endl;
	cout << "Go back? [y/n]  ";
	cin >> sel;
	if (sel == 'y') return;
	else system("cls");
}

void endgame() //just some screens for certain actions
{
	system("cls");
	cout  << endl << endl;
	cout << " ------------------------------------------------------------------------- " << endl;
	cout << "|    *****      *     *       * ******       ****  *       ****** ****    |" << endl;
	cout << "|   *          * *    * *   * * *           *    *  *     * *     *   *   |" << endl;
	cout << "|   *  ****   *   *   *  * *  * *****       *    *   *   *  ****  ****    |" << endl;
	cout << "|   *  *  *  *******  *   *   * *           *    *    * *   *     * *     |" << endl;
	cout << "|    *****  *       * *       * ******       ****      *    ***** *   *   |" << endl;
	cout << " ------------------------------------------------------------------------- " << endl;
	cout << "" << endl << endl;
	cout << "                        Y O U R   S C O R E : " << score << endl << endl;
	cout << "                        H I G H   S C O R E : " << highScore << endl;
	cout << "" << endl << endl;
}
