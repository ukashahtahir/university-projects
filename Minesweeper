TITLE Minesweeper
clr1 MACRO
xor eax,eax
xor ebx,ebx
xor ecx,ecx
xor edx,edx
ENDM
Include Irvine16.inc
writecolor PROTO color:BYTE
write PROTO char:BYTE
.data
filep BYTE "abx.txt",0
handle WORD ?
board BYTE 81 DUP (0)
displayBoard BYTE 81 DUP('?')
X1 BYTE 0
Y1 BYTE 0
choice WORD 0
bomb BYTE 0
num81 WORD 81
num9 WORD 9
num10 WORD 10
Xmul byte 9
bombMsg BYTE "Bombs: ",0
tileMsg BYTE "   Tiles: ",0
titleMsg BYTE "     MINESWEEPER",0
inputMsg BYTE "Choose on your own risk",0
qMsg BYTE "ESC to Quit",0
loose BYTE 0
tileCount BYTE 81
wMsg BYTE "            Your Win",0
lMsg BYTE "            Your loose",0
tScreen1 BYTE 0dh,0ah,0dh,0ah,0dh,0ah,0dh,0ah,"           1. New Game",0dh,0ah,0
tScreen2 BYTE "           2. Last Game",0dh,0ah,"           3. Quit",0dh,0ah,0

.code

main PROC
	mov ax, @data
	mov ds, ax
	mov tileCount, 81
	
	call titleSCREEN
	.IF choice == 3
	exit
	.ELSEIF choice == 1
	call newGame
	.ELSE
	call lastGame
	.ENDIF
	
	mov ah, 3eh
	mov bx, handle
	int 21h
	
	clr1
	
	;-------------GAME START-----------

	call printGrid
	
	mov loose, 0
	
	.WHILE loose == 0
	call input
	call printGrid
	.IF tileCount  < 11
	mov loose, 1
	.ENDIF
	.ENDW
	end1:
	call printRealGrid
	
	.IF loose == 1 && tileCount > 10
	mov edx, offset lMsg
	.ELSEIF loose == 1
	mov edx, offset wMsg
	.ENDIF
	
	mov ecx, 2
	lost:
	call writestring
	call crlf
	loop lost
	
	call crlf
	call waitmsg
	
	exit
main ENDP

indexConverter PROC USES EAX		; Converts index [x][y] position and stores it in EDX
	xor eax, eax
	xor edx, edx
	.IF X1 != 0 || X1 < 9
	mov al, X1
	mul Xmul
	.ENDIF
	add al, Y1
	mov dl, al
	ret
indexConverter ENDP

indexIncriment PROC			; Incriments index
	inc Y1
	.IF (Y1 == 9 && X1 < 9)
	mov Y1,0
	inc X1
	.ENDIF
	
	.IF X1 == 9
	mov Y1,0
	mov X1,0
	.ENDIF
	ret
indexIncriment ENDP


bombGenerator PROC USES EAX EDX	; Places bombs on Board
	xor eax,eax
	xor ecx,ecx
	xor edx,edx
	
	BK1:
	
	call RAND
	
	xor edx,edx
	
	mov edx,eax
	
	.IF  board[edx] != 9
	mov board[edx], 9
	call surrondBomb
	inc bomb
	.ENDIF
	
	.IF bomb != 10
	jmp BK1
	.ENDIF
	
	ret
bombGenerator ENDP

reveal1 PROC USES EBX			; Reveal around a space space (Empty Index)
	
	mov bl, board[EDX-9]
	.IF X1 > 0 && X1 < 9 && bl == 0 && displayBoard[EDX-9] == '?'
	mov displayBoard[EDX-9], ' '
	sub tileCount, 1
	.ELSEIF X1 > 0 && X1 < 9 && displayBoard[EDX-9] == '?'
	add bl, 48
	mov displayBoard[EDX-9], bl
	sub tileCount, 1
	.ENDIF
	
	mov bl, board[EDX+9]
	.IF X1 >= 0 && X1 < 8 && bl == 0 && displayBoard[EDX+9] == '?'
	mov displayBoard[EDX+9], ' '
	sub tileCount, 1
	.ELSEIF X1 >= 0 && X1 < 8 && displayBoard[EDX+9] == '?'
	add bl, 48
	mov displayBoard[EDX+9], bl
	sub tileCount, 1
	.ENDIF

	mov bl, board[EDX+1]
	.IF Y1 >= 0 && Y1 < 8 && bl == 0 && displayBoard[EDX+1] == '?'
	mov displayBoard[EDX+1], ' '
	sub tileCount, 1
	.ELSEIF Y1 >= 0 && Y1 < 8 && displayBoard[EDX+1] == '?'
	add bl, 48
	mov displayBoard[EDX+1], bl
	sub tileCount, 1
	.ENDIF

	mov bl, board[EDX-1]
	.IF Y1 > 0 && Y1 < 9 && bl == 0 && displayBoard[EDX-1] == '?'
	mov displayBoard[EDX-1], ' '
	sub tileCount, 1
	.ELSEIF Y1 > 0 && Y1 < 9 && displayBoard[EDX-1] == '?'
	add bl, 48
	mov displayBoard[EDX-1], bl
	sub tileCount, 1
	.ENDIF
	
	mov bl, board[EDX-10]
	.IF Y1 > 0 && X1 > 0 && bl == 0 && displayBoard[EDX-10] == '?'
	mov displayBoard[EDX-10], ' '
	sub tileCount, 1
	.ELSEIF Y1 > 0 && X1 > 0 && displayBoard[EDX-10] == '?'
	add bl, 48
	mov displayBoard[EDX-10], bl
	sub tileCount, 1
	.ENDIF
	
	mov bl, board[EDX-8]
	.IF Y1 < 9 && X1 > 0 && bl == 0 && displayBoard[EDX-8] == '?'
	mov displayBoard[EDX-8], ' '
	sub tileCount, 1
	.ELSEIF Y1 < 9 && X1 > 0 && displayBoard[EDX-8] == '?'
	add bl, 48
	mov displayBoard[EDX-8], bl
	sub tileCount, 1
	.ENDIF
	
	mov bl, board[EDX+8]
	.IF Y1 > 0 && X1 < 8 && bl == 0 && displayBoard[EDX+8] == '?'
	mov displayBoard[EDX+8], ' '
	sub tileCount, 1
	.ELSEIF Y1 > 0 && X1 < 8 && displayBoard[EDX+8] == '?'
	add bl, 48
	mov displayBoard[EDX+8], bl
	sub tileCount, 1
	.ENDIF
	
	mov bl, board[EDX+10]
	.IF Y1 < 8 && X1 < 8 && bl == 0 && displayBoard[EDX+10] == '?'
	mov displayBoard[EDX+10], ' '
	sub tileCount, 1
	.ELSEIF Y1 < 8 && X1 < 8 && displayBoard[EDX+10] == '?'
	add bl, 48
	mov displayBoard[EDX+10], bl
	sub tileCount, 1
	.ENDIF
	
	ret
reveal1 ENDP

input PROC				; Row and Column input and Actions after input
	inp1:
	xor eax,eax	
	xor edx,edx
	xor ecx,ecx
	xor ebx,ebx
	
	xor ebx,ebx
	
	.WHILE BX != 1
	
	xor eax,eax
	
	mov dl, 255
	mov ah, 6
	
	int 21h
	
	jz snes
	.IF EAX == 061Bh
	exit
	.ENDIF

	snes:
	
	xor eax,eax
	
	mov ax, 03
	int 033h
	.ENDW

	ror ecx, 4
	ror edx, 4
	.IF EDX > 9 || ECX > 9 || EDX == 0 || ECX == 0
	jmp inp1
	.ENDIF
	mov X1, dl
	mov Y1, cl
	
	xor eax,eax
	xor ebx,ebx
	xor ecx,ecx
	xor edx,edx
	
	dec X1
	dec Y1
	
	.IF X1 != 0
	call IndexConverter
	.ELSE
	xor edx, edx
	mov dl, Y1
	.ENDIF
	
	.IF EDX > 80
	mov edx, 0
	.ENDIF
	
	xor eax,eax
	xor ecx,ecx
	xor ebx,ebx
	
	mov al, board[EDX]
	
	mov esi, edx
	
	.IF AL == 9 && displayBoard[ESI] == '?'
	mov displayBoard[EDX], 15
	sub tileCount, 1
	mov loose, 1
	.ELSEIF AL == 0  && displayBoard[ESI] == '?'
	mov displayBoard[EDX], ' '
	sub tileCount, 1
	call reveal1
	.ELSEIF displayBoard[ESI] == '?'
	mov displayBoard[EDX], AL
	add displayBoard[EDX], 48
	sub tileCount, 1
	.ENDIF
	
	xor eax,eax	
	xor edx,edx
	xor ebx,ebx
	xor ecx,ecx
	
	ret
input ENDP

surrondBomb PROC USES EAX EDX		; Incriments around the index surrounding bomb
	
	push edx
	xor eax,eax
	mov eax,edx
	xor edx,edx
	div num9
	mov X1, al
	mov al, dl
	mov Y1, al

	pop edx
	
	.IF X1 > 0 && board[edx-9]!=9
	inc board[edx-9]
	.ENDIF
	.IF X1 < 8 && board[edx+9]!=9 
	inc board[edx+9]
	.ENDIF 
	.IF Y1 > 0 && board[edx-1]!=9 
	inc board[edx-1]
	.ENDIF 
	.IF Y1 < 8 && board[edx+1]!=9 
	inc board[edx+1]
	.ENDIF 
	.IF X1 > 0 && Y1 > 0 && board[edx-10]!=9
	inc board[edx-10]
	.ENDIF
	.IF X1 > 0 && Y1 < 8 && board[edx-8]!=9
	inc board[edx-8]
	.ENDIF
	.IF X1 < 8 && Y1 > 0 && board[edx+8]!=9
	inc board[edx+8]
	.ENDIF
	.IF X1 < 8 && Y1 < 8 && board[edx+10]!=9
	inc board[edx+10]
	.ENDIF
	
	
	;.IF EDX > 9 && board[EDX-9]!=9
	;inc board[edx-9]
	;.ENDIF
	;.IF EDX < 72 && board[EDX+9]!=9 
	;inc board[edx+9]
	;.ENDIF 
	
	ret
surrondBomb ENDP

printGrid PROC USES EAX EBX ECX EDX		; Prints the Title, Board and Bomb Count
	xor eax,eax
	xor ecx,ecx
	
	call clrscr
	
	mov edx, offset titleMsg
	call writestring
	call crlf
	mov ecx, 19
	
	INVOKE Write,' '
	
	.IF ECX != 1
		
		C0:			
		INVOKE Write,'-'
		loop C0
	.ENDIF
	call crlf
	
	xor ecx,ecx
	
	mov ecx, 9
	mov X1,0
	mov Y1,0
	L1:
	
	push ecx
	xor ecx,ecx
	
	mov ecx,9
	INVOKE Write,' '
	INVOKE Write,'|'		
		C2:
		
		call indexConverter
		mov al,displayBoard[edx]
		.IF AL == '?'
		INVOKE WriteColor, 1000b
		.ENDIF
		INVOKE Write,al
		INVOKE Write,'|'
		call indexIncriment
		loop C2
	
	call crlf
	
	xor ecx,ecx
	
	mov ecx, 19
	
	INVOKE Write,' '
	
	.IF ECX != 1
		C3:	
		
		INVOKE Write,'-'
		loop C3
	.ENDIF
	call crlf
	
	pop ecx
	
	loop L1
	
	mov edx, offset bombMsg
	call writestring
	xor eax,eax
	movzx eax, bomb
	call writedec
	mov edx, offset tileMsg
	call writestring
	xor eax,eax
	movzx eax, tileCount
	call writedec
	call crlf
	call crlf
	mov edx, offset inputMsg
	call writestring
	call crlf
	call crlf
	mov edx, offset qMsg
	call writestring
	
	xor eax,eax
	xor ebx,ebx
	xor ecx,ecx
	xor edx,edx
	
	ret
printGrid ENDP

Write PROC char:BYTE			; Custom writechar procedure
	push eax
	push edx
	mov ah,2 ; character output function
	mov dl,char
	int 21h
	pop edx
	pop eax
	ret
Write ENDP

RAND PROC USES EBX ECX EDX		; Custom Random procedure generates 0-80 using time
	xor eax,eax
	xor ecx,ecx
	xor edx,edx
	call delay1
	call delay1
	mov ah, 02Ch
	int 021h
	xor eax,eax
	mov ax, dx
	add ax, cx
	add ah, ch
	add al, cl
	add ah,dl
	add al,dh
	mul dx
	mul cx
	xor edx,edx
	div num81
	xor eax,eax
	mov ax, dx
	ret
RAND ENDP

delay1 PROC USES ECX			; Delay function
	mov cx, 4200000000
	DDD:
	loop DDD
	ret
delay1 ENDP

printRealGrid PROC USES EAX ECX		; Prints the actual Board
	xor eax,eax
	xor ecx,ecx

	call clrscr
	
	mov edx, offset titleMsg
	call writestring
	call crlf

	mov ecx, 19
	
	INVOKE Write,' '
	
	.IF ECX != 1
		
		C0:			
		INVOKE Write,'-'
		loop C0
	.ENDIF
	call crlf
	
	xor ecx,ecx
	
	mov ecx, 9
	mov X1,0
	mov Y1,0
	L1:
	
	push ecx
	xor ecx,ecx
	
	mov ecx,9
	INVOKE Write,' '
	INVOKE Write,'|'		
		C2:
		
		call indexConverter
		mov al,board[edx]
		.IF AL != 9
		add al,48
		.ELSEIF AL == 9
		mov al, 15
		.ENDIF
		.IF AL == 15
		INVOKE WriteColor,1100b
		INVOKE Write,al
		.ELSEIF Al != 48
		INVOKE Write,al
		.ELSEIF AL == 48
		INVOKE Write,' '
		.ENDIF
		INVOKE Write,'|'
		call indexIncriment
		loop C2
	
	call crlf
	
	xor ecx,ecx
	
	mov ecx, 19
	
	INVOKE Write,' '
	
	.IF ECX != 1
		C3:	
		
		INVOKE Write,'-'
		loop C3
	.ENDIF
	call crlf
	
	pop ecx
	
	loop L1
	
	call crlf
	
	ret
printRealGrid ENDP

WriteColor PROC color:BYTE		; Custom color procedure
	push eax
	push ebx
	push ecx
	push edx
	xor eax,eax
	xor ebx,ebx
	xor ecx,ecx
	xor edx,edx
	mov ah, 9
	mov bh, 0
	mov bl, color
	mov cx, 1
	int 010h
	pop edx
	pop ecx
	pop ebx
	pop eax
	ret
WriteColor ENDP

titleSCREEN PROC USES EAX EBX ECX EDX
	mov edx, offset tScreen1
	call writestring
	mov edx, offset tScreen2
	call writestring
	
	inp1:
	mov ah, 8
	int 21h
	
	.IF EAX == 831h || EAX == 832h ||EAX == 833h
	.ELSE
	jmp inp1
	.ENDIF
	sub ax, 830h
	mov choice, ax
	xor edx,edx
	xor eax,eax
	xor ecx,ecx
	xor edx,edx
	ret
titleSCREEN ENDP

newGame PROC
	;--------OPEN-----------

	mov al, 2
	mov dx, offset filep
	mov ah, 3dh
	int 21h
	jc err
	mov handle, ax
	
	err:
	;--------CREATE OR TRUNCATE-----------

	mov ah, 3ch
	mov cx, 0
	mov dx, offset filep
	int 21h
	mov handle,ax
	skip1:	
	
	clr1
	
	int 033h
	clr1
	call bombGenerator
	clr1
	;--------SEEK SET AT START-----------
	
	mov al, 0
	mov cx, 0
	mov dx, 0
	mov bx, handle
	mov ah, 42h
	int 21h
	
	;--------INPUT-----------
	
	
	clr1
	
	mov cx, 81
	mov edi, offset 0
	T1:
	add board[edi], 48
	inc edi
	loop T1
		
	mov bx, handle
	mov cx, 81		;BYTES TO WRITE
	mov edx, offset board
	mov ah,40h
	int 21h
	mov cx, 81
	mov edi, offset 0
	T2:
	sub board[edi], 48
	inc edi
	loop T2
	
	;--------END FILE HANDLING------------
newGame ENDP

lastGame PROC
	mov al, 2
	mov dx, offset filep
	mov ah, 3dh
	int 21h
	mov handle, ax
	jna errX
	;--------SEEK SET AT START-----------
	
	mov al, 0
	mov cx, 0
	mov dx, 0
	mov bx, handle
	mov ah, 42h
	int 21h

	;--------Load old data-----------
	
	mov bx, handle
	mov cx, 81
	mov dx, offset board
	mov ah, 3fh
	int 21h
	
	mov cx,81
	mov edi,0
	
	C11:
	sub board[edi], 48
	inc edi
	loop C11
	
	jmp skip12
	
	xor eax,eax
	xor ebx,ebx
	xor ecx,ecx
	xor edx,edx
	
	errX:
		;--------CREATE OR TRUNCATE-----------
	
		mov ah, 3ch
		mov cx, 0
		mov dx, offset filep
		int 21h
		mov handle,ax	
		
		clr1
		
		int 033h
		clr1
		call bombGenerator
		clr1
		;--------SEEK SET AT START-----------
		
		mov al, 0
		mov cx, 0
		mov dx, 0
		mov bx, handle
		mov ah, 42h
		int 21h
		
		;--------INPUT-----------
		
		
		clr1
		
		mov cx, 81
		mov edi, offset 0
		T11:
		add board[edi], 48
		inc edi
		loop T11
			
		mov bx, handle
		mov cx, 81		;BYTES TO WRITE
		mov edx, offset board
		mov ah,40h
		int 21h
		mov cx, 81
		mov edi, offset 0
		T12:
		sub board[edi], 48
		inc edi
	loop T12
	
	skip12:
	ret
lastGame ENDP

END main
